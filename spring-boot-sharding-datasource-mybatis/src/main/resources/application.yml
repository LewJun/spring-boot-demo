server:
  port: 1234
  servlet:
    context-path: /demo

# DataSource Config
#spring:
#  datasource:
#    driver-class-name: com.mysql.jdbc.Driver
#    schema: classpath:db/schema-h2.sql
#    data: classpath:db/data-h2.sql
#    url: jdbc:mysql://localhost:3306/test
#    username: root
#    password: Root123456

spring:
  # ShardingSphere 配置项
  shardingsphere:
    datasource:
      # 所有数据源的名字
      names: test, test0, test1
      test:
        type: com.zaxxer.hikari.HikariDataSource # 使用 Hikari 数据库连接池
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://127.0.0.1:3306/test
        username: root
        password:

      test0:
        type: com.zaxxer.hikari.HikariDataSource # 使用 Hikari 数据库连接池
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://127.0.0.1:3306/test0
        username: root
        password:

      test1:
        type: com.zaxxer.hikari.HikariDataSource # 使用 Hikari 数据库连接池
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://127.0.0.1:3306/test1
        username: root
        password:
    # 分片规则
    sharding:
      tables:
        # ################## 垂直分库的表 ######################
        ac01:
          actualDataNodes: test.ac01
          keyGenerator:
            column: id
            type: SNOWFLAKE
          tableStrategy:
            inline:
              shardingColumn: id
              algorithmExpression: ac01
        # ################## 垂直分库的表 ######################

        # ab01 表配置
        ab01:
          # 真实数据节点
          actualDataNodes: test0.ab01_$->{[0,2,4,6,8]}, test1.ab01_$->{[1,3,5,7,9]}
          key-generator: # 主键生成策略
            column: id
            type: SNOWFLAKE # 雪花算法 所以id是long类型
          database-strategy:
            inline:
              algorithm-expression: test$->{id % 2}
              sharding-column: id
          table-strategy:
            inline:
              algorithm-expression: ab01_$->{id % 10}
              sharding-column: id

        # ############  公共表配置  开始   ####################
        # 在broadcast-tables中，配置了t_dict为广播表/公共表，所以这里是对t_dict进行配置
        ad01:
          # 配置公共表的主键生成策略
          key-generator:
            column: id
            type: SNOWFLAKE
        # todo 如果公共表比较多，那还挺麻烦的，有解决方法吗？
      # 配置广播表/公共表（在项目中一般会有一些表的内容是固定的，或者说是很少修改的表，但是又经常跟这些表关联查询，例如一些状态信息。一般在我们项目中这种表会存放在我们各个数据库，所以称为公共表）
      # 同时存在于 test、test0、test1中
      broadcast-tables:
        - ad01
    # ############  公共表配置  开始   ####################

    # 拓展属性配置
    props:
      sql:
        show: true # 打印 SQL


mybatis:
  # 扫描xml的位置
  mapper-locations: classpath:/mappers/**/*Mapper.xml
  configuration:
    map-underscore-to-camel-case: true
    # mybatis开启缓存
    cache-enabled: true

logging:
  level:
    org:
      springframework:
        web:
          servlet:
            mvc:
              method:
                annotation:
                  RequestMappingHandlerMapping: trace
